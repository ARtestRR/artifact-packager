name: CI

on:
  push: 
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PowerShell on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh -v

      - name: Install PowerShell on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install powershell-core --version=7.4.5 -y --force
          pwsh -v

      - name: Install 7-Zip on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y p7zip-full
          7z --help

      - name: Install 7-Zip on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install 7zip -y --force
          refreshenv
          7z | Select-String "7-Zip"

      - name: Validate 7z installation
        shell: bash
        run: |
          7z | grep "7-Zip"
          if [ $? -ne 0 ]; then
            echo "::error::7-Zip not installed correctly!"
            exit 1
          fi

      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          Import-Module Pester -PassThru

      - name: Build artifacts
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          ./Create-Artifacts.ps1 -RootDir './dev_build'
          Get-ChildItem ./dev_build -Recurse -Filter *.7z* | Format-Table FullName

      - name: Run tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = (Join-Path $env:GITHUB_WORKSPACE 'tests/Artifacts.Tests.ps1')
          $config.Output.Verbosity = 'Detailed'
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = 'test-results.xml'
          $config.TestResult.OutputFormat = 'NUnitXml'
          $config.Run.PassThru = $true
          Invoke-Pester -Configuration $config

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.xml